// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SVMapPBTest.proto

#ifndef PROTOBUF_SVMapPBTest_2eproto__INCLUDED
#define PROTOBUF_SVMapPBTest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ok_msg/SVMapData.pb.h"
// @@protoc_insertion_point(includes)

namespace ok_test_msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SVMapPBTest_2eproto();
void protobuf_AssignDesc_SVMapPBTest_2eproto();
void protobuf_ShutdownFile_SVMapPBTest_2eproto();

class SmallTestMessage;

// ===================================================================

class SmallTestMessage : public ::google::protobuf::Message {
 public:
  SmallTestMessage();
  virtual ~SmallTestMessage();

  SmallTestMessage(const SmallTestMessage& from);

  inline SmallTestMessage& operator=(const SmallTestMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmallTestMessage& default_instance();

  void Swap(SmallTestMessage* other);

  // implements Message ----------------------------------------------

  SmallTestMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmallTestMessage& from);
  void MergeFrom(const SmallTestMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string vstr = 1;
  inline bool has_vstr() const;
  inline void clear_vstr();
  static const int kVstrFieldNumber = 1;
  inline const ::std::string& vstr() const;
  inline void set_vstr(const ::std::string& value);
  inline void set_vstr(const char* value);
  inline void set_vstr(const char* value, size_t size);
  inline ::std::string* mutable_vstr();
  inline ::std::string* release_vstr();
  inline void set_allocated_vstr(::std::string* vstr);

  // @@protoc_insertion_point(class_scope:ok_test_msg.SmallTestMessage)
 private:
  inline void set_has_vstr();
  inline void clear_has_vstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* vstr_;
  friend void  protobuf_AddDesc_SVMapPBTest_2eproto();
  friend void protobuf_AssignDesc_SVMapPBTest_2eproto();
  friend void protobuf_ShutdownFile_SVMapPBTest_2eproto();

  void InitAsDefaultInstance();
  static SmallTestMessage* default_instance_;
};
// ===================================================================

static const int kSmallTestMessageSVMapEntryFieldFieldNumber = 100;
extern ::google::protobuf::internal::ExtensionIdentifier< ::ok_msg::SVMapEntryData,
    ::google::protobuf::internal::MessageTypeTraits< ::ok_test_msg::SmallTestMessage >, 11, false >
  SmallTestMessageSVMapEntry_field;

// ===================================================================

// SmallTestMessage

// optional string vstr = 1;
inline bool SmallTestMessage::has_vstr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmallTestMessage::set_has_vstr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmallTestMessage::clear_has_vstr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmallTestMessage::clear_vstr() {
  if (vstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vstr_->clear();
  }
  clear_has_vstr();
}
inline const ::std::string& SmallTestMessage::vstr() const {
  // @@protoc_insertion_point(field_get:ok_test_msg.SmallTestMessage.vstr)
  return *vstr_;
}
inline void SmallTestMessage::set_vstr(const ::std::string& value) {
  set_has_vstr();
  if (vstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vstr_ = new ::std::string;
  }
  vstr_->assign(value);
  // @@protoc_insertion_point(field_set:ok_test_msg.SmallTestMessage.vstr)
}
inline void SmallTestMessage::set_vstr(const char* value) {
  set_has_vstr();
  if (vstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vstr_ = new ::std::string;
  }
  vstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:ok_test_msg.SmallTestMessage.vstr)
}
inline void SmallTestMessage::set_vstr(const char* value, size_t size) {
  set_has_vstr();
  if (vstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vstr_ = new ::std::string;
  }
  vstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ok_test_msg.SmallTestMessage.vstr)
}
inline ::std::string* SmallTestMessage::mutable_vstr() {
  set_has_vstr();
  if (vstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ok_test_msg.SmallTestMessage.vstr)
  return vstr_;
}
inline ::std::string* SmallTestMessage::release_vstr() {
  clear_has_vstr();
  if (vstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vstr_;
    vstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SmallTestMessage::set_allocated_vstr(::std::string* vstr) {
  if (vstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vstr_;
  }
  if (vstr) {
    set_has_vstr();
    vstr_ = vstr;
  } else {
    clear_has_vstr();
    vstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ok_test_msg.SmallTestMessage.vstr)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ok_test_msg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SVMapPBTest_2eproto__INCLUDED
