// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestMessage.proto

#ifndef PROTOBUF_TestMessage_2eproto__INCLUDED
#define PROTOBUF_TestMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ok_test_msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TestMessage_2eproto();
void protobuf_AssignDesc_TestMessage_2eproto();
void protobuf_ShutdownFile_TestMessage_2eproto();

class TestMessage;

// ===================================================================

class TestMessage : public ::google::protobuf::Message {
 public:
  TestMessage();
  virtual ~TestMessage();

  TestMessage(const TestMessage& from);

  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessage& default_instance();

  void Swap(TestMessage* other);

  // implements Message ----------------------------------------------

  TestMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessage& from);
  void MergeFrom(const TestMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes raw_bytes = 1;
  inline bool has_raw_bytes() const;
  inline void clear_raw_bytes();
  static const int kRawBytesFieldNumber = 1;
  inline const ::std::string& raw_bytes() const;
  inline void set_raw_bytes(const ::std::string& value);
  inline void set_raw_bytes(const char* value);
  inline void set_raw_bytes(const void* value, size_t size);
  inline ::std::string* mutable_raw_bytes();
  inline ::std::string* release_raw_bytes();
  inline void set_allocated_raw_bytes(::std::string* raw_bytes);

  // optional string raw_str = 2;
  inline bool has_raw_str() const;
  inline void clear_raw_str();
  static const int kRawStrFieldNumber = 2;
  inline const ::std::string& raw_str() const;
  inline void set_raw_str(const ::std::string& value);
  inline void set_raw_str(const char* value);
  inline void set_raw_str(const char* value, size_t size);
  inline ::std::string* mutable_raw_str();
  inline ::std::string* release_raw_str();
  inline void set_allocated_raw_str(::std::string* raw_str);

  // repeated int64 nums = 3;
  inline int nums_size() const;
  inline void clear_nums();
  static const int kNumsFieldNumber = 3;
  inline ::google::protobuf::int64 nums(int index) const;
  inline void set_nums(int index, ::google::protobuf::int64 value);
  inline void add_nums(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      nums() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_nums();

  // @@protoc_insertion_point(class_scope:ok_test_msg.TestMessage)
 private:
  inline void set_has_raw_bytes();
  inline void clear_has_raw_bytes();
  inline void set_has_raw_str();
  inline void clear_has_raw_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* raw_bytes_;
  ::std::string* raw_str_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > nums_;
  friend void  protobuf_AddDesc_TestMessage_2eproto();
  friend void protobuf_AssignDesc_TestMessage_2eproto();
  friend void protobuf_ShutdownFile_TestMessage_2eproto();

  void InitAsDefaultInstance();
  static TestMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// TestMessage

// optional bytes raw_bytes = 1;
inline bool TestMessage::has_raw_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessage::set_has_raw_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessage::clear_has_raw_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessage::clear_raw_bytes() {
  if (raw_bytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_bytes_->clear();
  }
  clear_has_raw_bytes();
}
inline const ::std::string& TestMessage::raw_bytes() const {
  // @@protoc_insertion_point(field_get:ok_test_msg.TestMessage.raw_bytes)
  return *raw_bytes_;
}
inline void TestMessage::set_raw_bytes(const ::std::string& value) {
  set_has_raw_bytes();
  if (raw_bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_bytes_ = new ::std::string;
  }
  raw_bytes_->assign(value);
  // @@protoc_insertion_point(field_set:ok_test_msg.TestMessage.raw_bytes)
}
inline void TestMessage::set_raw_bytes(const char* value) {
  set_has_raw_bytes();
  if (raw_bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_bytes_ = new ::std::string;
  }
  raw_bytes_->assign(value);
  // @@protoc_insertion_point(field_set_char:ok_test_msg.TestMessage.raw_bytes)
}
inline void TestMessage::set_raw_bytes(const void* value, size_t size) {
  set_has_raw_bytes();
  if (raw_bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_bytes_ = new ::std::string;
  }
  raw_bytes_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ok_test_msg.TestMessage.raw_bytes)
}
inline ::std::string* TestMessage::mutable_raw_bytes() {
  set_has_raw_bytes();
  if (raw_bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_bytes_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ok_test_msg.TestMessage.raw_bytes)
  return raw_bytes_;
}
inline ::std::string* TestMessage::release_raw_bytes() {
  clear_has_raw_bytes();
  if (raw_bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = raw_bytes_;
    raw_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TestMessage::set_allocated_raw_bytes(::std::string* raw_bytes) {
  if (raw_bytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete raw_bytes_;
  }
  if (raw_bytes) {
    set_has_raw_bytes();
    raw_bytes_ = raw_bytes;
  } else {
    clear_has_raw_bytes();
    raw_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ok_test_msg.TestMessage.raw_bytes)
}

// optional string raw_str = 2;
inline bool TestMessage::has_raw_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestMessage::set_has_raw_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestMessage::clear_has_raw_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestMessage::clear_raw_str() {
  if (raw_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_str_->clear();
  }
  clear_has_raw_str();
}
inline const ::std::string& TestMessage::raw_str() const {
  // @@protoc_insertion_point(field_get:ok_test_msg.TestMessage.raw_str)
  return *raw_str_;
}
inline void TestMessage::set_raw_str(const ::std::string& value) {
  set_has_raw_str();
  if (raw_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_str_ = new ::std::string;
  }
  raw_str_->assign(value);
  // @@protoc_insertion_point(field_set:ok_test_msg.TestMessage.raw_str)
}
inline void TestMessage::set_raw_str(const char* value) {
  set_has_raw_str();
  if (raw_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_str_ = new ::std::string;
  }
  raw_str_->assign(value);
  // @@protoc_insertion_point(field_set_char:ok_test_msg.TestMessage.raw_str)
}
inline void TestMessage::set_raw_str(const char* value, size_t size) {
  set_has_raw_str();
  if (raw_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_str_ = new ::std::string;
  }
  raw_str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ok_test_msg.TestMessage.raw_str)
}
inline ::std::string* TestMessage::mutable_raw_str() {
  set_has_raw_str();
  if (raw_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ok_test_msg.TestMessage.raw_str)
  return raw_str_;
}
inline ::std::string* TestMessage::release_raw_str() {
  clear_has_raw_str();
  if (raw_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = raw_str_;
    raw_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TestMessage::set_allocated_raw_str(::std::string* raw_str) {
  if (raw_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete raw_str_;
  }
  if (raw_str) {
    set_has_raw_str();
    raw_str_ = raw_str;
  } else {
    clear_has_raw_str();
    raw_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ok_test_msg.TestMessage.raw_str)
}

// repeated int64 nums = 3;
inline int TestMessage::nums_size() const {
  return nums_.size();
}
inline void TestMessage::clear_nums() {
  nums_.Clear();
}
inline ::google::protobuf::int64 TestMessage::nums(int index) const {
  // @@protoc_insertion_point(field_get:ok_test_msg.TestMessage.nums)
  return nums_.Get(index);
}
inline void TestMessage::set_nums(int index, ::google::protobuf::int64 value) {
  nums_.Set(index, value);
  // @@protoc_insertion_point(field_set:ok_test_msg.TestMessage.nums)
}
inline void TestMessage::add_nums(::google::protobuf::int64 value) {
  nums_.Add(value);
  // @@protoc_insertion_point(field_add:ok_test_msg.TestMessage.nums)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TestMessage::nums() const {
  // @@protoc_insertion_point(field_list:ok_test_msg.TestMessage.nums)
  return nums_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TestMessage::mutable_nums() {
  // @@protoc_insertion_point(field_mutable_list:ok_test_msg.TestMessage.nums)
  return &nums_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ok_test_msg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TestMessage_2eproto__INCLUDED
