// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ok_msg/DynamicProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ok_msg/DynamicProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ok_msg {

namespace {

const ::google::protobuf::Descriptor* DynamicProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DynamicProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ok_5fmsg_2fDynamicProto_2eproto() {
  protobuf_AddDesc_ok_5fmsg_2fDynamicProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ok_msg/DynamicProto.proto");
  GOOGLE_CHECK(file != NULL);
  DynamicProto_descriptor_ = file->message_type(0);
  static const int DynamicProto_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, vstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, vbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, vint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, vuint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, vbool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, vfloat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, vdouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, vsint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, vsuint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, vsint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, vsuint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, vsfloat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, vsdouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, vsstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, v_),
  };
  DynamicProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DynamicProto_descriptor_,
      DynamicProto::default_instance_,
      DynamicProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DynamicProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ok_5fmsg_2fDynamicProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DynamicProto_descriptor_, &DynamicProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ok_5fmsg_2fDynamicProto_2eproto() {
  delete DynamicProto::default_instance_;
  delete DynamicProto_reflection_;
}

void protobuf_AddDesc_ok_5fmsg_2fDynamicProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031ok_msg/DynamicProto.proto\022\006ok_msg\"\261\002\n\014"
    "DynamicProto\022\014\n\004vStr\030\001 \001(\t\022\016\n\006vBytes\030\002 \001"
    "(\014\022\014\n\004vInt\030\003 \001(\022\022\r\n\005vUInt\030\004 \001(\004\022\r\n\005vBool"
    "\030\005 \001(\010\022\016\n\006vFloat\030\006 \001(\002\022\017\n\007vDouble\030\007 \001(\001\022"
    "\021\n\005vsInt\030\010 \003(\022B\002\020\001\022\022\n\006vsUInt\030\t \003(\004B\002\020\001\022\023"
    "\n\007vsInt32\030\n \003(\021B\002\020\001\022\024\n\010vsUInt32\030\013 \003(\rB\002\020"
    "\001\022\023\n\007vsFloat\030\014 \003(\002B\002\020\001\022\024\n\010vsDouble\030\r \003(\001"
    "B\002\020\001\022\r\n\005vsStr\030\016 \003(\t\022\t\n\001k\030\017 \003(\t\022\037\n\001v\030\020 \003("
    "\0132\024.ok_msg.DynamicProtoB1\n\026org.oarphkit."
    "msg.protoB\022DynamicValueProtosH\001\200\001\000", 394);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ok_msg/DynamicProto.proto", &protobuf_RegisterTypes);
  DynamicProto::default_instance_ = new DynamicProto();
  DynamicProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ok_5fmsg_2fDynamicProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ok_5fmsg_2fDynamicProto_2eproto {
  StaticDescriptorInitializer_ok_5fmsg_2fDynamicProto_2eproto() {
    protobuf_AddDesc_ok_5fmsg_2fDynamicProto_2eproto();
  }
} static_descriptor_initializer_ok_5fmsg_2fDynamicProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DynamicProto::kVStrFieldNumber;
const int DynamicProto::kVBytesFieldNumber;
const int DynamicProto::kVIntFieldNumber;
const int DynamicProto::kVUIntFieldNumber;
const int DynamicProto::kVBoolFieldNumber;
const int DynamicProto::kVFloatFieldNumber;
const int DynamicProto::kVDoubleFieldNumber;
const int DynamicProto::kVsIntFieldNumber;
const int DynamicProto::kVsUIntFieldNumber;
const int DynamicProto::kVsInt32FieldNumber;
const int DynamicProto::kVsUInt32FieldNumber;
const int DynamicProto::kVsFloatFieldNumber;
const int DynamicProto::kVsDoubleFieldNumber;
const int DynamicProto::kVsStrFieldNumber;
const int DynamicProto::kKFieldNumber;
const int DynamicProto::kVFieldNumber;
#endif  // !_MSC_VER

DynamicProto::DynamicProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ok_msg.DynamicProto)
}

void DynamicProto::InitAsDefaultInstance() {
}

DynamicProto::DynamicProto(const DynamicProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ok_msg.DynamicProto)
}

void DynamicProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vint_ = GOOGLE_LONGLONG(0);
  vuint_ = GOOGLE_ULONGLONG(0);
  vbool_ = false;
  vfloat_ = 0;
  vdouble_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynamicProto::~DynamicProto() {
  // @@protoc_insertion_point(destructor:ok_msg.DynamicProto)
  SharedDtor();
}

void DynamicProto::SharedDtor() {
  if (vstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vstr_;
  }
  if (vbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vbytes_;
  }
  if (this != default_instance_) {
  }
}

void DynamicProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamicProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DynamicProto_descriptor_;
}

const DynamicProto& DynamicProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ok_5fmsg_2fDynamicProto_2eproto();
  return *default_instance_;
}

DynamicProto* DynamicProto::default_instance_ = NULL;

DynamicProto* DynamicProto::New() const {
  return new DynamicProto;
}

void DynamicProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DynamicProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(vint_, vdouble_);
    if (has_vstr()) {
      if (vstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vstr_->clear();
      }
    }
    if (has_vbytes()) {
      if (vbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vbytes_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  vsint_.Clear();
  vsuint_.Clear();
  vsint32_.Clear();
  vsuint32_.Clear();
  vsfloat_.Clear();
  vsdouble_.Clear();
  vsstr_.Clear();
  k_.Clear();
  v_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DynamicProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ok_msg.DynamicProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vStr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vstr().data(), this->vstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vBytes;
        break;
      }

      // optional bytes vBytes = 2;
      case 2: {
        if (tag == 18) {
         parse_vBytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vbytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vInt;
        break;
      }

      // optional sint64 vInt = 3;
      case 3: {
        if (tag == 24) {
         parse_vInt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &vint_)));
          set_has_vint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vUInt;
        break;
      }

      // optional uint64 vUInt = 4;
      case 4: {
        if (tag == 32) {
         parse_vUInt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vuint_)));
          set_has_vuint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vBool;
        break;
      }

      // optional bool vBool = 5;
      case 5: {
        if (tag == 40) {
         parse_vBool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vbool_)));
          set_has_vbool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_vFloat;
        break;
      }

      // optional float vFloat = 6;
      case 6: {
        if (tag == 53) {
         parse_vFloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vfloat_)));
          set_has_vfloat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_vDouble;
        break;
      }

      // optional double vDouble = 7;
      case 7: {
        if (tag == 57) {
         parse_vDouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vdouble_)));
          set_has_vdouble();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_vsInt;
        break;
      }

      // repeated sint64 vsInt = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_vsInt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_vsint())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 66, input, this->mutable_vsint())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vsUInt;
        break;
      }

      // repeated uint64 vsUInt = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_vsUInt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_vsuint())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 74, input, this->mutable_vsuint())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_vsInt32;
        break;
      }

      // repeated sint32 vsInt32 = 10 [packed = true];
      case 10: {
        if (tag == 82) {
         parse_vsInt32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_vsint32())));
        } else if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 82, input, this->mutable_vsint32())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vsUInt32;
        break;
      }

      // repeated uint32 vsUInt32 = 11 [packed = true];
      case 11: {
        if (tag == 90) {
         parse_vsUInt32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vsuint32())));
        } else if (tag == 88) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90, input, this->mutable_vsuint32())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_vsFloat;
        break;
      }

      // repeated float vsFloat = 12 [packed = true];
      case 12: {
        if (tag == 98) {
         parse_vsFloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vsfloat())));
        } else if (tag == 101) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98, input, this->mutable_vsfloat())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_vsDouble;
        break;
      }

      // repeated double vsDouble = 13 [packed = true];
      case 13: {
        if (tag == 106) {
         parse_vsDouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_vsdouble())));
        } else if (tag == 105) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 106, input, this->mutable_vsdouble())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_vsStr;
        break;
      }

      // repeated string vsStr = 14;
      case 14: {
        if (tag == 114) {
         parse_vsStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_vsstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vsstr(this->vsstr_size() - 1).data(),
            this->vsstr(this->vsstr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vsstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_vsStr;
        if (input->ExpectTag(122)) goto parse_k;
        break;
      }

      // repeated string k = 15;
      case 15: {
        if (tag == 122) {
         parse_k:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_k()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k(this->k_size() - 1).data(),
            this->k(this->k_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "k");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_k;
        if (input->ExpectTag(130)) goto parse_v;
        break;
      }

      // repeated .ok_msg.DynamicProto v = 16;
      case 16: {
        if (tag == 130) {
         parse_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_v()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_v;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ok_msg.DynamicProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ok_msg.DynamicProto)
  return false;
#undef DO_
}

void DynamicProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ok_msg.DynamicProto)
  // optional string vStr = 1;
  if (has_vstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vstr().data(), this->vstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vstr(), output);
  }

  // optional bytes vBytes = 2;
  if (has_vbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->vbytes(), output);
  }

  // optional sint64 vInt = 3;
  if (has_vint()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->vint(), output);
  }

  // optional uint64 vUInt = 4;
  if (has_vuint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->vuint(), output);
  }

  // optional bool vBool = 5;
  if (has_vbool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->vbool(), output);
  }

  // optional float vFloat = 6;
  if (has_vfloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vfloat(), output);
  }

  // optional double vDouble = 7;
  if (has_vdouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->vdouble(), output);
  }

  // repeated sint64 vsInt = 8 [packed = true];
  if (this->vsint_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vsint_cached_byte_size_);
  }
  for (int i = 0; i < this->vsint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->vsint(i), output);
  }

  // repeated uint64 vsUInt = 9 [packed = true];
  if (this->vsuint_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vsuint_cached_byte_size_);
  }
  for (int i = 0; i < this->vsuint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->vsuint(i), output);
  }

  // repeated sint32 vsInt32 = 10 [packed = true];
  if (this->vsint32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vsint32_cached_byte_size_);
  }
  for (int i = 0; i < this->vsint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->vsint32(i), output);
  }

  // repeated uint32 vsUInt32 = 11 [packed = true];
  if (this->vsuint32_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vsuint32_cached_byte_size_);
  }
  for (int i = 0; i < this->vsuint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->vsuint32(i), output);
  }

  // repeated float vsFloat = 12 [packed = true];
  if (this->vsfloat_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vsfloat_cached_byte_size_);
  }
  for (int i = 0; i < this->vsfloat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->vsfloat(i), output);
  }

  // repeated double vsDouble = 13 [packed = true];
  if (this->vsdouble_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vsdouble_cached_byte_size_);
  }
  for (int i = 0; i < this->vsdouble_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->vsdouble(i), output);
  }

  // repeated string vsStr = 14;
  for (int i = 0; i < this->vsstr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->vsstr(i).data(), this->vsstr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "vsstr");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->vsstr(i), output);
  }

  // repeated string k = 15;
  for (int i = 0; i < this->k_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->k(i).data(), this->k(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "k");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->k(i), output);
  }

  // repeated .ok_msg.DynamicProto v = 16;
  for (int i = 0; i < this->v_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->v(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ok_msg.DynamicProto)
}

::google::protobuf::uint8* DynamicProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ok_msg.DynamicProto)
  // optional string vStr = 1;
  if (has_vstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vstr().data(), this->vstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vstr(), target);
  }

  // optional bytes vBytes = 2;
  if (has_vbytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->vbytes(), target);
  }

  // optional sint64 vInt = 3;
  if (has_vint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->vint(), target);
  }

  // optional uint64 vUInt = 4;
  if (has_vuint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->vuint(), target);
  }

  // optional bool vBool = 5;
  if (has_vbool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->vbool(), target);
  }

  // optional float vFloat = 6;
  if (has_vfloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vfloat(), target);
  }

  // optional double vDouble = 7;
  if (has_vdouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->vdouble(), target);
  }

  // repeated sint64 vsInt = 8 [packed = true];
  if (this->vsint_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vsint_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vsint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->vsint(i), target);
  }

  // repeated uint64 vsUInt = 9 [packed = true];
  if (this->vsuint_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vsuint_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vsuint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->vsuint(i), target);
  }

  // repeated sint32 vsInt32 = 10 [packed = true];
  if (this->vsint32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vsint32_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vsint32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->vsint32(i), target);
  }

  // repeated uint32 vsUInt32 = 11 [packed = true];
  if (this->vsuint32_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vsuint32_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vsuint32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->vsuint32(i), target);
  }

  // repeated float vsFloat = 12 [packed = true];
  if (this->vsfloat_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vsfloat_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vsfloat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->vsfloat(i), target);
  }

  // repeated double vsDouble = 13 [packed = true];
  if (this->vsdouble_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vsdouble_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vsdouble_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->vsdouble(i), target);
  }

  // repeated string vsStr = 14;
  for (int i = 0; i < this->vsstr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vsstr(i).data(), this->vsstr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vsstr");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->vsstr(i), target);
  }

  // repeated string k = 15;
  for (int i = 0; i < this->k_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k(i).data(), this->k(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "k");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->k(i), target);
  }

  // repeated .ok_msg.DynamicProto v = 16;
  for (int i = 0; i < this->v_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->v(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ok_msg.DynamicProto)
  return target;
}

int DynamicProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string vStr = 1;
    if (has_vstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vstr());
    }

    // optional bytes vBytes = 2;
    if (has_vbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vbytes());
    }

    // optional sint64 vInt = 3;
    if (has_vint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->vint());
    }

    // optional uint64 vUInt = 4;
    if (has_vuint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vuint());
    }

    // optional bool vBool = 5;
    if (has_vbool()) {
      total_size += 1 + 1;
    }

    // optional float vFloat = 6;
    if (has_vfloat()) {
      total_size += 1 + 4;
    }

    // optional double vDouble = 7;
    if (has_vdouble()) {
      total_size += 1 + 8;
    }

  }
  // repeated sint64 vsInt = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->vsint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->vsint(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vsint_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 vsUInt = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->vsuint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->vsuint(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vsuint_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint32 vsInt32 = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->vsint32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->vsint32(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vsint32_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 vsUInt32 = 11 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->vsuint32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vsuint32(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vsuint32_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float vsFloat = 12 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->vsfloat_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vsfloat_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double vsDouble = 13 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->vsdouble_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vsdouble_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string vsStr = 14;
  total_size += 1 * this->vsstr_size();
  for (int i = 0; i < this->vsstr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->vsstr(i));
  }

  // repeated string k = 15;
  total_size += 1 * this->k_size();
  for (int i = 0; i < this->k_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->k(i));
  }

  // repeated .ok_msg.DynamicProto v = 16;
  total_size += 2 * this->v_size();
  for (int i = 0; i < this->v_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->v(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamicProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DynamicProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DynamicProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DynamicProto::MergeFrom(const DynamicProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  vsint_.MergeFrom(from.vsint_);
  vsuint_.MergeFrom(from.vsuint_);
  vsint32_.MergeFrom(from.vsint32_);
  vsuint32_.MergeFrom(from.vsuint32_);
  vsfloat_.MergeFrom(from.vsfloat_);
  vsdouble_.MergeFrom(from.vsdouble_);
  vsstr_.MergeFrom(from.vsstr_);
  k_.MergeFrom(from.k_);
  v_.MergeFrom(from.v_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vstr()) {
      set_vstr(from.vstr());
    }
    if (from.has_vbytes()) {
      set_vbytes(from.vbytes());
    }
    if (from.has_vint()) {
      set_vint(from.vint());
    }
    if (from.has_vuint()) {
      set_vuint(from.vuint());
    }
    if (from.has_vbool()) {
      set_vbool(from.vbool());
    }
    if (from.has_vfloat()) {
      set_vfloat(from.vfloat());
    }
    if (from.has_vdouble()) {
      set_vdouble(from.vdouble());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DynamicProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicProto::CopyFrom(const DynamicProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicProto::IsInitialized() const {

  return true;
}

void DynamicProto::Swap(DynamicProto* other) {
  if (other != this) {
    std::swap(vstr_, other->vstr_);
    std::swap(vbytes_, other->vbytes_);
    std::swap(vint_, other->vint_);
    std::swap(vuint_, other->vuint_);
    std::swap(vbool_, other->vbool_);
    std::swap(vfloat_, other->vfloat_);
    std::swap(vdouble_, other->vdouble_);
    vsint_.Swap(&other->vsint_);
    vsuint_.Swap(&other->vsuint_);
    vsint32_.Swap(&other->vsint32_);
    vsuint32_.Swap(&other->vsuint32_);
    vsfloat_.Swap(&other->vsfloat_);
    vsdouble_.Swap(&other->vsdouble_);
    vsstr_.Swap(&other->vsstr_);
    k_.Swap(&other->k_);
    v_.Swap(&other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DynamicProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DynamicProto_descriptor_;
  metadata.reflection = DynamicProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ok_msg

// @@protoc_insertion_point(global_scope)
